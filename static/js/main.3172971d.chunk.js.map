{"version":3,"sources":["components/Body/index.js","components/Score/index.js","components/Navbar/index.js","components/Card/index.js","components/Footer/index.js","App.js","index.js"],"names":["Body","className","Score","props","currentscore","topscore","Navbar","href","onClick","resetgame","messagestatus","displayMessage","Card","id","alt","name","src","image","key","changeCard","Footer","App","state","cards","guessedIds","animating","newState","includes","push","setState","shuffleCard","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","card","toString","Component","ReactDOM","render","document","getElementById"],"mappings":"0wFAaeA,MATf,WACI,OACI,yBAAKC,UAAY,iBACb,2CACA,yG,YCWGC,MAhBf,SAAgBC,GAER,OACI,yBAAKF,UAAU,cACZ,wBAAIA,UAAU,YACT,sCAAaE,EAAMC,eAGvB,wBAAIH,UAAU,YACV,2CAAiBE,EAAME,aCoC5BC,MA3Cf,SAAgBH,GAsBd,OAEI,yBAAKF,UAAU,0CACX,uBAAGA,UAAU,eAAeM,KAAK,IAAIC,QAASL,EAAMM,WAChD,4CAEA,yBAAKR,UAAU,kBAzBJ,WAErB,OAAOE,EAAMO,eACT,IAAK,IACD,OAAO,0DAEX,IAAK,IACD,OAAO,wDAEX,IAAK,IACD,OAAO,2DAgBEC,IAGP,wBAAIV,UAAU,cACV,kBAAC,EAAD,CAAOG,aAAgBD,EAAMC,aAC1BC,SAAYF,EAAME,SAClBK,cAAiBP,EAAMO,mB,MCnB7BE,MAhBf,SAAcT,GAGV,OACI,yBAAKF,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKY,GAAIV,EAAMU,GAAIC,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,MAAOC,IAAKf,EAAMU,GAC7DL,QAAS,kBAAML,EAAMgB,WAAWhB,EAAMU,KAAKZ,UAAU,c,aCD1DmB,MARf,WACE,OACE,4BAAQnB,UAAU,UAChB,oD,gOC2GSoB,E,2MAxGXC,MAAQ,CACJC,QACAC,WAAW,GACXpB,aAAa,EACbC,SAAS,EACTK,cAAc,IAEde,WAAU,G,EAIdN,WAAa,SAAAN,GAGT,IAAMa,E,qVAAQ,IAAQ,EAAKJ,OAEpBI,EAASF,WAAWG,SAASd,IAShCa,EAAShB,cAAgB,IACzBgB,EAASD,WAAY,EACrBC,EAASrB,SACAqB,EAASrB,SAASqB,EAAStB,aACzBsB,EAASrB,SACTqB,EAAStB,aACpBsB,EAAStB,aAAa,EACtBsB,EAASF,WAAY,KAfrBE,EAASF,WAAWI,KAAKf,GAEzBa,EAAStB,eACTsB,EAAShB,cAAgB,IACzBgB,EAASD,WAAY,GAezB,EAAKI,SAASH,GACd,EAAKI,e,EAKTA,YAAc,WASN,IAPJ,IAIQC,EAAgBC,EAJlBT,EAAQ,EAAKD,MAAMC,MAGjBU,EAAeV,EAAMW,OAIlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBR,IAHjBU,GAIAV,EAAMU,GAAgBV,EAAMS,GAC5BT,EAAMS,GAAeD,EAI3B,EAAKF,SAAS,CAACN,W,EAGnBd,UAAY,WACR,EAAKoB,SAAS,CACVL,WAAW,GACXpB,aAAa,EACbC,SAAS,EACTK,cAAc,O,wEAIb,IAAD,OACJ,OACI,6BACI,kBAAC,EAAD,CACQN,aAAckC,KAAKhB,MAAMlB,aACzBC,SAAWiC,KAAKhB,MAAMjB,SACtBK,cAAe4B,KAAKhB,MAAMZ,cAC1Be,UAAWa,KAAKhB,MAAMG,UACtBhB,UAAW6B,KAAK7B,YAGxB,kBAAC,EAAD,MACE6B,KAAKhB,MAAMC,MAAMgB,IAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACC3B,GAAI2B,EAAK3B,GACTK,IAAKsB,EAAK3B,GAAG4B,WACb1B,KAAMyB,EAAKzB,KACXE,MAAOuB,EAAKvB,MACZE,WAAY,EAAKA,eAIrB,kBAAC,EAAD,W,GApGEuB,aCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3172971d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Body(){\r\n    return(\r\n        <div className = \"bodyContainer\">            \r\n            <h1>Memory Game</h1>\r\n            <p>Click on an image to earn points, but don't click on any more than once!</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Body;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score (props){\r\n    \r\n        return (\r\n            <div className=\"scoreBoard\">\r\n               <li className=\"nav-item\">\r\n                    <h4 >Score: {props.currentscore}</h4>\r\n                </li>\r\n                {/* <h4> | </h4> */}\r\n                <li className=\"nav-item\">\r\n                    <h4> Top Score: {props.topscore}</h4>\r\n                </li>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\nimport \"./style.css\"\r\nimport Score from \"../Score\";\r\n\r\n\r\nfunction Navbar(props) {\r\n\r\n\r\n  const displayMessage = () =>{\r\n \r\n    switch(props.messagestatus){\r\n        case \"0\":\r\n            return <span >Click an image to begin!</span>;\r\n           \r\n        case \"1\":\r\n            return <span >You guessed correctly!</span>\r\n           \r\n        case \"2\":\r\n            return <span >You guessed incorrectly!</span>\r\n            \r\n        default:\r\n            break;    \r\n         }\r\n  } ;\r\n\r\n \r\n\r\n  return (\r\n                     \r\n      <nav className=\"navbar sticky-top  navbar-dark bg-dark\">\r\n          <a className=\"navbar-brand\" href=\"#\" onClick={props.resetgame}>\r\n              <h1>Clicky Game</h1></a>\r\n              \r\n              <div className=\"center msgBox \"> \r\n                   { displayMessage()}  \r\n                    \r\n              </div>\r\n              <ul className=\"navbar-nav\">    \r\n                  <Score currentscore = {props.currentscore}\r\n                     topscore = {props.topscore}\r\n                     messagestatus = {props.messagestatus}\r\n                     />                  \r\n              </ul>    \r\n               \r\n      </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\n\r\nfunction Card(props) {\r\n\r\n   \r\n    return(\r\n        <div className=\"card\">\r\n            <div className=\"img-container\">               \r\n                <img id={props.id} alt={props.name} src={props.image} key={props.id}\r\n                    onClick={() => props.changeCard(props.id)} className=\"change\" />\r\n                \r\n            </div>            \r\n\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span>Clicky Game 2019</span>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, {Component} from \"react\";\r\nimport Body from \"./components/Body\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Card from \"./components/Card\";\r\nimport cards  from \"./cards.json\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nclass App extends Component{\r\n\r\n    state = {\r\n        cards,\r\n        guessedIds:[],\r\n        currentscore:0,\r\n        topscore:0,\r\n        messagestatus:\"0\",\r\n        //\"0\" -- initial message, \"1\"-- guessed correctly, \"2\"--guessed incorrectly\r\n        animating:false\r\n    };\r\n\r\n   // change cards , calcalute score and change score\r\n    changeCard = id =>{\r\n    \r\n        // Clone this.state to the newState object\r\n        const newState = { ...this.state };\r\n\r\n        if ( ! newState.guessedIds.includes(id)){\r\n            newState.guessedIds.push(id);\r\n           \r\n            newState.currentscore++;\r\n            newState.messagestatus = \"1\";        \r\n            newState.animating = true;\r\n           \r\n            \r\n        }else{\r\n            newState.messagestatus = \"2\";\r\n            newState.animating = true;\r\n            newState.topscore = \r\n                     newState.topscore>newState.currentscore\r\n                     ? newState.topscore\r\n                     : newState.currentscore;\r\n            newState.currentscore=0;   \r\n            newState.guessedIds =[];\r\n\r\n        }       \r\n        \r\n        this.setState(newState);\r\n        this.shuffleCard();\r\n\r\n\r\n    }\r\n\r\n    shuffleCard = () => {\r\n\r\n        const cards = this.state.cards;\r\n       \r\n       \r\n            let currentIndex = cards.length;\r\n            let temporaryValue, randomIndex;\r\n          \r\n            // While there remain elements to shuffle...\r\n            while (0 !== currentIndex) {\r\n          \r\n              // Pick a remaining element...\r\n              randomIndex = Math.floor(Math.random() * currentIndex);\r\n              currentIndex --;\r\n          \r\n              // And swap it with the current element.\r\n              temporaryValue = cards[currentIndex];\r\n              cards[currentIndex] = cards[randomIndex];\r\n              cards[randomIndex] = temporaryValue;\r\n            }\r\n        \r\n\r\n        this.setState({cards});\r\n    }\r\n\r\n    resetgame = () =>{\r\n        this.setState({\r\n            guessedIds:[],\r\n            currentscore:0,\r\n            topscore:0,\r\n            messagestatus:\"0\",\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div >\r\n                <Navbar \r\n                        currentscore={this.state.currentscore}\r\n                        topscore= {this.state.topscore}\r\n                        messagestatus={this.state.messagestatus}\r\n                        animating={this.state.animating}\r\n                        resetgame={this.resetgame}\r\n                />\r\n                \r\n                <Body />\r\n                { this.state.cards.map(card =>\r\n                   <Card \r\n                    id={card.id}\r\n                    key={card.id.toString()}\r\n                    name={card.name}\r\n                    image={card.image}\r\n                    changeCard={this.changeCard}\r\n                   />\r\n                )\r\n                }\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}